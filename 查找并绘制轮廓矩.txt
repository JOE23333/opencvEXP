#include<opencv2/opencv.hpp>
#include<opencv2/highgui/highgui.hpp>
#include<opencv2/imgproc/imgproc.hpp>
#include<iostream>

using namespace cv;
using namespace std;

#define WINDOW_NAME1 "yuanshitu"
#define WINDOW_NAME2 "lunkuo"

Mat g_srcimage, g_grayimage;
int g_nThresh = 100;
int g_nMaxThresh = 255;
RNG g_rng(12345);
Mat g_cannyMat_output;
vector<vector<Point>> g_vContours;
vector<Vec4i> g_vHierarchy;

void on_ThreshChange(int, void*);

int main(int argc,char** argv)
{
	system("color 1E");
	g_srcimage = imread("aa.jpg");
	cvtColor(g_srcimage, g_grayimage, CV_RGB2GRAY);
	blur(g_grayimage, g_grayimage, Size(3, 3));
	namedWindow(WINDOW_NAME1, WINDOW_AUTOSIZE);
	imshow(WINDOW_NAME1, g_srcimage);

	createTrackbar("fz", WINDOW_NAME1, &g_nThresh, g_nMaxThresh, on_ThreshChange);
	on_ThreshChange(0, 0);
	waitKey();
	return 0;
}

void on_ThreshChange(int, void*)
{
	Canny(g_grayimage, g_cannyMat_output, g_nThresh, g_nThresh * 2, 3);
	findContours(g_cannyMat_output, g_vContours, g_vHierarchy, RETR_TREE, CHAIN_APPROX_SIMPLE, Point(0, 0));
	vector<Moments> mu(g_vContours.size());
	for (int i = 0; i<g_vContours.size(); i++)
	{
		mu[i] = moments(g_vContours, false);
	}
	vector<Point2f>mc(g_vContours.size());
	for (int i = 0; i<g_vContours.size(); i++)
	{
		mc[i] = Point2f(static_cast<float>(mu[i].m10 / mu[i].m00), static_cast<float>(mu[i].m01 / mu[i].m00));
	}
	Mat drawing = Mat::zeros(g_cannyMat_output.size(), CV_8UC3);
	for (unsigned int i = 0; i<g_vContours.size(); i++)
	{
		Scalar color = Scalar(g_rng.uniform(0, 255), g_rng.uniform(0, 255), g_rng.uniform(0, 255));
		drawContours(drawing, g_vContours, i, color, 2, 8, g_vHierarchy, 0, Point());
		circle(drawing, mc[i], 4, color, -1, 8, 0);
	}
	namedWindow(WINDOW_NAME2, WINDOW_AUTOSIZE);
	imshow(WINDOW_NAME2, drawing);
	for (int i = 0; i<g_vContours.size(); i++)
	{
		printf("m00 lunkuo[%d]mianji:(M_00)=%.3f\n mianji =%.3f, long %.2f\n", i, mu[i].m00, contourArea(g_vContours[i]), arcLength(g_vContours[i], true));
		Scalar color = Scalar(g_rng.uniform(0, 255), g_rng.uniform(0, 255), g_rng.uniform(0, 255));
		drawContours(drawing, g_vContours, i, color, 2, 8, g_vHierarchy, 0, Point());
		circle(drawing, mc [i], 4, color, -1, 8, 0);
	}
}