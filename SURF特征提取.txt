#include<opencv2/core/core.hpp>
#include"opencv2/highgui/highgui.hpp"
#include"opencv2/features2d/features2d.hpp"
#include"opencv2/nonfree/nonfree.hpp"
#include<opencv2/legacy/legacy.hpp>
#include<iostream>
using namespace cv;
using namespace std;


int main(){


Mat srcimage1=imread("");
Mat srcimage2=imread("");




int minHessian = 700;

SurfFeatureDetector detector (minHessian);
std::vector<KeyPoint> keypoints_1,keypoints_2;



detector.detect(srcimage1,keypoints_1);
detector.detect(srcimage2,keypoints_2);

SurfDescriptorExtractor extractoer;
Mat descriptors1,descriptors2;
extractor.compute(srcimage1,keypoints_1,descriptors1);
extractor.compute(srcimage2,keypoints_2,descriptors2);




BruteForceMatcher<L2<float>>matcher;
std::vector<DMatch>matches;
matcher.match(descriptors1,descriptors2,matches);

Mat imgMatches;
drawMatches(srcimage1,keypoints_1,srcimage2,keypoints_2,matches,imgMatches)



imshow("11",imgMatches);
waitKey(0);
return 0;






}