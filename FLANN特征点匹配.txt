#include<opencv2/core/core.hpp>
#include"opencv2/highgui/highgui.hpp"
#include"opencv2/features2d/features2d.hpp"
#include"opencv2/nonfree/nonfree.hpp"
#include<opencv2/legacy/legacy.hpp>
#include<iostream>
using namespace cv;
using namespace std;


int main(int argc,char** argv){
Mat img_1=imread();
Mat img_2=imread();


int minHessian = 300;
SurfFeatureDetector detector (minHessian);
std::vector<KeyPoint> keypoints_1,keypoints_2;


detector.detect(img_1,keypoints_1);
detector.detect(img_2,keypoints_2);


SURF extractor;
Mat descriptors_1,descriptors_2;
extractor.compute(img_1,keypoints_1,descriptors_1);
extractor.compute(img_2,keypoints_2,descriptors_2);


FlannBasedMatcher matcher;
std::vector<DMatch>matches;
matcher.match(descriptors_1,descriptors_2,matches);
double max_dist =0;double min_dist=100;


for (int i=0;i<descriotors_1.rows;i++)

{ double dist =matches[i].distance;
  if (dist<min_dist) min_dist=dist;
  if (dist>max_dist) max_dist=dist;
}

printf(">zuidajuli:%f\n",max_dist);
printf(">zuixiaojuli:%f\n",min_dist);



std::vector<DMatch> good_matches;
for (int i=0;i<descriptors_1.rows;i++)
{
   if (matches[i].distance<2*min_dist)
       {good_matches.push_back(matches[i]);}
}


Mat img_matches;
drawMatches(img_1,keypoints_1,img_2,keypoints_2,good_matches,img_matches,
Scalar::all(-1),Scalar::all(-1),vector<char>(),DrawMatchesFlags::NOT_DRAW_SINGLE_POINTS);

for (int i=0; i<good_matches.size();i++)

{
   printf(">fuhetiaojiand[%d]dian1:%d--dian2:%d\n",i,good_matches[i].queryIdx,good_matches[i].trainIdx);
}


imshow("xiaoguotu",img_matches);

waitKey(0);
return 0;
}
