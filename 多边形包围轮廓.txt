#include<opencv2/opencv.hpp>
#include<opencv2/highgui/highgui.hpp>
#include<opencv2/imgproc/imgproc.hpp>
#include<iostream>
using namespace std;
using namespace cv;

#define WINDOW_NAME1 "yuantu"
#define WINDOW_NAME2 "lunkuotu"

Mat g_srcimage;
Mat g_grayimage;
int g_nThresh = 50;
int g_nThresh_max = 255;
RNG g_rng(12345);


//static void ShowHelpText();
void on_ContoursChange(int, void*);

int main()
{
	Mat srcimage = imread("1.jpg");

	cvtColor(g_srcimage, g_grayimage, CV_GRAY2BGR);
	blur(g_grayimage, g_grayimage, Size(3, 3));

	namedWindow(WINDOW_NAME1, WINDOW_AUTOSIZE);
	imshow(WINDOW_NAME1, g_srcimage);

	createTrackbar("canny", WINDOW_NAME1, &g_nThresh, g_nThresh_max, on_ContoursChange);
	on_ContoursChange(0, 0);
	waitKey(0);
	return 0;
}

void on_ContoursChange(int, void*)
{
	Mat threshold_output;
	vector<vector<Point>> contours;
	vector<Vec4i> hierarchy;

	threshold(g_grayimage, threshold_output, g_nThresh, 255, THRESH_BINARY);
	findContours(threshold_output, contours, hierarchy, RETR_TREE, CHAIN_APPROX_SIMPLE, Point(0, 0));

	vector<vector<Point>> contours_poly(contours.size());
	vector<Rect>boundRect(contours.size());
	vector<Point2f>center(contours.size());
	vector<float>radius(contours.size());

	for (int i = 0; i<contours.size(); i++)
	{
		approxPolyDP(Mat(contours[i]), contours_poly[i], 3, true);
		boundRect[i] = boundingRect(Mat(contours_poly[i]));
		minEnclosingCircle(contours_poly[i], center[i], radius[i]);
	}
	Mat drawing = Mat::zeros(threshold_output.size(), CV_8UC3);
	for (int i = 0; i<contours.size(); i++)
	{
		Scalar color = Scalar(g_rng.uniform(0, 255), g_rng.uniform(0, 255), g_rng.uniform(0, 255));
		drawContours(drawing, contours_poly, i, color, 2, 8, 0);
		circle(drawing, center[i], (int)radius[i], color, 2, 8, 0);

	}
	namedWindow(WINDOW_NAME2, WINDOW_AUTOSIZE);
	imshow(WINDOW_NAME2, drawing);
}